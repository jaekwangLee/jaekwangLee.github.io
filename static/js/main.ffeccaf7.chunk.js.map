{"version":3,"sources":["styles/pallete.js","components/common/input/input.styled.js","components/common/input/index.js","pages/auth/auth.styled.js","pages/auth/register.js","pages/auth/auth.js","lib/axios.js","lib/middleware.js","reducer/modules/auth.js","lib/api/auth.js","pages/auth/auth.container.js","pages/home/home.js","pages/home/home.styled.js","pages/home/home.container.js","pages/post/post.styled.js","pages/post/post.js","reducer/modules/post.js","lib/api/post.js","pages/post/post.container.js","App.js","serviceWorker.js","reducer/index.js","index.js"],"names":["gray","InputStyledWrapper","styled","div","_templateObject","Input","input","_templateObject2","TextareaWrapper","_templateObject3","Textarea","textarea","_templateObject4","CustomInput","_ref","labelConfig","inputConfing","react_default","a","createElement","CustomInputToText","_ref2","value","style","valueConfing","CustomTextarea","_ref3","textConfig","AuthStyledContainer","auth_styled_templateObject","AuthStyledBlock","auth_styled_templateObject2","Register","componentDidMount","marginBottom","textAlign","fontWeight","placeholder","width","height","borderWidth","borderBottomWidth","es_button","type","size","float","React","Component","Auth","console","log","_this","props","user","componentDidUpdate","_this2","this","auth_styled","react_router","exact","path","component","auth_AuthComponent","login","register","PureComponent","AuthComponent","input_CustomInput","htmlFor","id","onClick","username","document","querySelector","password","marginTop","react_router_dom","to","color","axios","Axios","create","defaults","headers","common","post","interceptors","response","use","error","createReduxThunk","request","SUCCESS","concat","FAILURE","params","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","abrupt","sent","payload","data","t0","stop","_x","apply","arguments","onLogin","authReducer","handleActions","_handleActions","defineProperty","state","produce","draft","action","name","nickname","AuthContainer","auth","connect","Home","HomeStyledContainer","home_styled_templateObject","HomeContainer","home_styled","home","PostStyleWrapper","post_styled_templateObject","PostStyledBlock","post_styled_templateObject2","Post","onUpload","_this$props","contents","user_uid","user_token","hash_tags","main_content","texts","Swal","fire","title","onDistributeHashes","push","Base64","encode","_arrayToJson","write","content","tag_list","open_range","arr","length","obj","i","JSON","stringify","loop","temp_contents","start_hash","indexOf","end_hash","slice","word","test","String","post_styled","display","flexDirection","input_CustomInputToText","flex","textIndent","fontSize","getUser","input_CustomTextarea","onChange","e","edit","target","getPost","postWrite","editPost","createAction","editUser","post_handleActions","uid","parse","_ref4","_ref5","post_post","App","history","render","withRouter","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffeccaf7.chunk.js","sourcesContent":["export const gray = ['#f8f9fa', '#f1f3f5', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', '#868e96', '#495057', '#343a40', '#212529'];\n\nexport const cyan = ['#e3fafc', '#c5f6fa', '#99e9f2', '#66d9e8', '#3bc9db', '#22b8cf', '#15aabf', '#1098ad', '#0c8599', '#0b7285'];\n\nexport const red = ['#fff5f5', '#ffe3e3', '#ffc9c9', '#ffa8a8', '#ff8787', '#ff6b6b', '#fa5252', '#f03e3e', '#e03131', '#c92a2a'];\n\nexport const yellow = ['#fff9db', '#fff3bf', '#ffec99', '#ffe066', '#ffd43b', '#fcc419', '#fab005', '#f59f00', '#f08c00', '#e67700'];\n\nexport const blue = ['#e7f5ff', '#d0ebff', '#a5d8ff', '#74c0fc', '#4dabf7', '#339af0', '#228be6', '#1c7ed6', '#1971c2', '#1864ab'];\n\nexport const grape = ['#f8f0fc', '#f3d9fa', '#eebefa', '#e599f7', '#da77f2', '#cc5de8', '#be4bdb', '#ae3ec9', '#9c36b5', '#862e9c'];\n","import styled from 'styled-components';\nimport { gray } from '../../../styles/pallete';\n\nexport const InputStyledWrapper = styled.div`\n    height: 40px;\n    width: 100%;\n    text-align: left;\n    text-indent: 8px;\n    vertical-align: center;\n    border-bottom: 1px solid ${gray[2]};\n    margin-right: 4px;\n`;\n\nexport const Input = styled.input`\n    font-size: 12px;\n    line-height: 18px;\n    letter-spacing: 0.11px;\n    color: rgba(0, 0, 0, 0.7);\n    width: 100%;\n    height: 100%;\n    border: 0px;\n    font-weight: 600;\n`;\n\nexport const TextareaWrapper = styled.div`\n    width: 100%;\n    height: 200px;\n    text-align: left;\n    text-indent: 8px;\n    vertical-align: top;\n    border: 1px solid ${gray[2]};\n    margin-right: 4px;\n`;\n\nexport const Textarea = styled.textarea`\n    font-size: 12px;\n    line-height: 18px;\n    letter-spacing: 0.11px;\n    color: rgba(0, 0, 0, 0.7);\n    width: calc(100% - 12px);\n    height: calc(100% - 12px);\n    overflow: scroll;\n    border: 0px;\n    fontweight: 600;\n`;\n","import React from 'react';\n\n// styled\nimport { InputStyledWrapper, Input, TextareaWrapper, Textarea } from './input.styled';\n\nexport const CustomInput = ({ labelConfig, inputConfing }) => (\n    <InputStyledWrapper>\n        <label {...labelConfig} />\n        <Input {...inputConfing} />\n    </InputStyledWrapper>\n);\n\nexport const CustomInputToText = ({ value, style, valueConfing }) => (\n    <InputStyledWrapper style={style}>\n        <p {...valueConfing}>{value}</p>\n    </InputStyledWrapper>\n);\n\nexport const CustomTextarea = ({ labelConfig, textConfig }) => (\n    <TextareaWrapper>\n        <label {...labelConfig} />\n        <Textarea {...textConfig} />\n    </TextareaWrapper>\n);\n","import styled from 'styled-components';\nimport { gray } from '../../styles/pallete';\n\nconst AuthStyledContainer = styled.div`\n    background: ${gray[3]};\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const AuthStyledBlock = styled.div`\n    background: white;\n    width: 340px;\n    box-shadow: 1px 5px 12px ${gray[3]};\n    padding: 16px;\n`;\nexport default AuthStyledContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Input, Button } from 'antd';\n\n// styled\nimport { AuthStyledBlock } from './auth.styled';\nclass Register extends React.Component {\n    componentDidMount = () => {};\n\n    render() {\n        return (\n            <AuthStyledBlock>\n                <h2 style={{ marginBottom: 16, textAlign: 'center', fontWeight: 'bold' }}>My client</h2>\n                <h3 style={{ marginBottom: 8, fontWeight: 'bold' }}>회원가입</h3>\n                <p style={{ marginBottom: 8 }}>\n                    <Input placeholder='이메일을 입력하세요' style={{ width: '100%', height: 40, borderWidth: 0, borderBottomWidth: 1 }} />\n                </p>\n                <p>\n                    <Input placeholder='비밀번호를 입력하세요' style={{ width: '100%', height: 40, borderWidth: 0, borderBottomWidth: 1 }} />\n                </p>\n                <p>\n                    <Input placeholder='비밀번호를 확인하세요' style={{ width: '100%', height: 40, borderWidth: 0, borderBottomWidth: 1 }} />\n                </p>\n                <p>\n                    <Input placeholder='이름을 입력하세요' style={{ width: '100%', height: 40, borderWidth: 0, borderBottomWidth: 1 }} />\n                </p>\n                <p>\n                    <Input placeholder='닉네임을 입력하세요' style={{ width: '100%', height: 40, borderWidth: 0, borderBottomWidth: 1 }} />\n                </p>\n                <Button type='primary' size='large' style={{ width: '100%', float: 'right' }}>\n                    회원가입\n                </Button>\n            </AuthStyledBlock>\n        );\n    }\n}\n\nexport default Register;\n","import React from 'react';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport { Button } from 'antd';\n\n// styled\nimport { CustomInput } from '../../components/common/input';\nimport AuthStyledContainer, { AuthStyledBlock } from './auth.styled';\nimport Register from './register';\n\nclass Auth extends React.PureComponent {\n    componentDidMount = () => {\n        console.log('mount: ', this.props.user);\n    };\n\n    componentDidUpdate = () => {\n        console.log('update: ', this.props.user);\n    };\n\n    render() {\n        return (\n            <AuthStyledContainer>\n                <Switch>\n                    <Route exact path='/auth' component={() => <AuthComponent login={this.props.login} />} />\n                    <Route path='/auth/register' component={() => <Register {...this.props} />} />\n                </Switch>\n            </AuthStyledContainer>\n        );\n    }\n}\n\nconst AuthComponent = ({ login }) => (\n    <AuthStyledBlock>\n        <h2 style={{ marginBottom: 16, textAlign: 'center', fontWeight: 'bold' }}>My client</h2>\n        <h3 style={{ marginBottom: 8, fontWeight: 'bold' }}>로그인입니다</h3>\n        <p style={{ marginBottom: 8 }}>\n            <CustomInput labelConfig={{ htmlFor: 'email' }} inputConfing={{ id: 'email', placeholder: '이메일을 입력하세요', type: 'text' }} />\n        </p>\n        <p>\n            <CustomInput labelConfig={{ htmlFor: 'password' }} inputConfing={{ id: 'password', placeholder: '비밀번호를 입력하세요', type: 'password' }} />\n        </p>\n        <Button\n            type='primary'\n            size='large'\n            style={{ width: '100%' }}\n            onClick={() => {\n                const username = document.querySelector('#email').value;\n                const password = document.querySelector('#password').value;\n                login({ username, password });\n            }}\n        >\n            로그인\n        </Button>\n        <div style={{ marginTop: 8 }}>\n            <Link to='/auth/register' style={{ color: 'black', float: 'right' }}>\n                회원가입\n            </Link>\n        </div>\n    </AuthStyledBlock>\n);\nexport default Auth;\n","import Axios from 'axios';\nimport { BASE_URL } from './variables';\n\nconst axios = Axios.create();\n\naxios.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4'; //헤더 설정\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n// 인터셉터 설정\naxios.interceptors.response.use(\n    response => {\n        return response;\n    },\n    error => {\n        return error;\n    },\n);\n\nexport default axios;\n","export function createReduxThunk(type, request) {\n    const SUCCESS = `${type}_SUCCESS`;\n    const FAILURE = `${type}_FAILURE`;\n\n    return params => async dispatch => {\n        if (!request) {\n            return dispatch({ type });\n        }\n        try {\n            const response = await request(params);\n            console.log(response);\n            dispatch({\n                type: SUCCESS,\n                payload: response.data,\n            });\n        } catch (e) {\n            dispatch({\n                type: FAILURE,\n                payload: e,\n                error: true,\n            });\n            throw e;\n        }\n    };\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport * as AUTH_API from '../../lib/api/auth';\n\n// middleware\nimport { createReduxThunk } from '../../lib/middleware';\n\n// types\nconst LOGIN = 'auth/LOGIN';\nconst LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\nconst LOGIN_FAILURE = 'auth/LOGIN_FAILURE';\nconst REGISTER = 'auth/REGISTER';\n\n// actions\nexport const onLogin = createReduxThunk(LOGIN, AUTH_API.login);\nexport const onRegister = createReduxThunk(REGISTER);\n\n// initalState\nconst initialState = {\n    user: {\n        username: '',\n        password: '',\n        name: '',\n        nickname: '',\n    },\n};\n\n// reducer\nconst authReducer = handleActions(\n    {\n        [LOGIN_SUCCESS]: (state, { payload }) =>\n            produce(state, draft => {\n                console.log(payload);\n            }),\n        [LOGIN_FAILURE]: (state, action) =>\n            produce(state, draft => {\n                console.log(state, action);\n            }),\n    },\n    initialState,\n);\nexport default authReducer;\n","import axios from '../axios';\n\nexport const login = ({ username, password }) => {\n    return axios.post('/auth/login', { username, password });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n// components\nimport Auth from './auth';\n\n// actions\nimport { onLogin } from '../../reducer/modules/auth';\n\nclass AuthContainer extends React.PureComponent {\n    render() {\n        return <Auth {...this.props} />;\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    login: ({ username, password }) => dispatch(onLogin({ username, password })),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AuthContainer);\n","import React from 'react';\n\nclass Home extends React.Component {\n    componentDidMount = () => {};\n\n    render() {\n        return (\n            <div>\n                <p>Home</p>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nconst HomeStyledContainer = styled.div``;\n\nexport default HomeStyledContainer;\n","import React from 'react';\n\n// components\nimport Home from './home';\nimport HomeStyledContainer from './home.styled';\n\nclass HomeContainer extends React.PureComponent {\n    componentDidMount = () => {};\n\n    render() {\n        return (\n            <HomeStyledContainer>\n                <Home />\n            </HomeStyledContainer>\n        );\n    }\n}\n\nexport default HomeContainer;\n","import styled from 'styled-components';\nimport { gray } from '../../styles/pallete';\n\nconst PostStyleWrapper = styled.div`\n    background: ${gray[3]};\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const PostStyledBlock = styled.div`\n    background: white;\n    width: 430px;\n    box-shadow: 1px 5px 12px ${gray[3]};\n    padding: 16px;\n`;\n\nexport default PostStyleWrapper;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { Base64 } from 'js-base64';\nimport Swal from 'sweetalert2';\n// styled\nimport { CustomInput, CustomInputToText, CustomTextarea } from '../../components/common/input';\nimport PostStyledWrapper, { PostStyledBlock } from './post.styled';\n\nclass Post extends React.PureComponent {\n    componentDidMount = () => {\n        // console.log('mount: ', this.props.uid, this.props.contents);\n    };\n\n    componentDidUpdate = () => {\n        // console.log('contents: ', this.props.contents);\n    };\n\n    onUpload = async () => {\n        let { contents, user_uid, user_token } = this.props;\n        if (!contents) {\n            return Swal.fire({ title: '글 등록 - 본문을 작성해주세요', type: 'info' });\n        }\n        const hash_tags = this.onDistributeHashes(contents);\n        if (hash_tags === '{}') {\n            return Swal.fire({ title: '글 등록 - 하나 이상의 태그를 작성해주세요', type: 'info' });\n        }\n\n        let main_content = [];\n        main_content.push(Base64.encode(contents));\n        const texts = this._arrayToJson(main_content);\n        await this.props.write({ user_uid, user_token, content: texts, tag_list: hash_tags, open_range: 'public' });\n\n        // 완료\n        Swal.fire({ title: '글 등록을 완료하였습니다.', type: 'success' });\n    };\n\n    _arrayToJson = arr => {\n        if (arr.length === 0) return '';\n        let obj = {};\n        const length = arr.length;\n        for (let i = 0; i < length; i++) {\n            obj[`${i}`] = arr[i];\n        }\n        return JSON.stringify(obj);\n    };\n\n    onDistributeHashes = contents => {\n        let obj = {};\n        let loop = 0;\n        let temp_contents = contents;\n        while (true) {\n            let start_hash = temp_contents.indexOf('#');\n            if (loop >= 3) break;\n            if (start_hash === -1) break;\n\n            temp_contents = temp_contents.slice(start_hash);\n            let end_hash =\n                temp_contents.indexOf(' ') !== -1\n                    ? temp_contents.indexOf(' ')\n                    : temp_contents.indexOf('\\n') !== -1\n                    ? temp_contents.indexOf('\\n')\n                    : temp_contents.length;\n            const word = temp_contents.slice(1, end_hash);\n            if (word.length > 0) {\n                const reg = /^[가-힣|a-z|A-Z|0-9|_|\\*]{1,20}$/;\n                const result = reg.test(String(word));\n                if (result) {\n                    obj[`${loop}`] = word;\n                    loop += 1;\n                }\n            }\n\n            temp_contents = temp_contents.slice(end_hash);\n        }\n        return JSON.stringify(obj);\n    };\n\n    render() {\n        return (\n            <PostStyledWrapper>\n                <PostStyledBlock>\n                    <h2 style={{ marginBottom: 16, textAlign: 'center', fontWeight: 'bold' }}>Create Post</h2>\n                    <h3 style={{ marginBottom: 8, fontWeight: 'bold' }}>글쓰기</h3>\n                    <div style={{ marginBottom: 8, display: 'flex', flexDirection: 'row' }}>\n                        <div style={{ width: '100%' }}>\n                            <p style={{ fontWeight: '600' }}>user_uid</p>\n                            <CustomInputToText\n                                value={this.props.user_uid ? this.props.user_uid : '-'}\n                                style={{ flex: 1, textIndent: '0px', fontSize: '8px', fontWeight: '500' }}\n                                valueConfing={{ id: 'uid' }}\n                            />\n                        </div>\n                        <div style={{ width: '100%' }}>\n                            <p style={{ fontWeight: '600' }}>user_token</p>\n                            <CustomInputToText\n                                value={this.props.user_token ? this.props.user_token : '-'}\n                                style={{ flex: 1, textIndent: '0px', fontSize: '8px', fontWeight: '500' }}\n                                valueConfing={{ id: 'token' }}\n                            />\n                        </div>\n                        <Button\n                            onClick={() => {\n                                this.props.getUser();\n                            }}\n                        >\n                            계정 불러오기\n                        </Button>\n                    </div>\n                    <div style={{ marginBottom: 9, display: 'flex', flexDirection: 'row' }}>\n                        <CustomTextarea\n                            labelConfig={{ htmlFor: 'contents' }}\n                            textConfig={{\n                                id: 'post',\n                                placeholder: '글 내용을 작성하세요',\n                                type: 'contents',\n                                value: this.props.contents,\n                                onChange: e => {\n                                    this.props.edit(e.target.value);\n                                },\n                            }}\n                        />\n                        <Button\n                            onClick={() => {\n                                this.props.getPost();\n                            }}\n                        >\n                            내용 불러오기\n                        </Button>\n                    </div>\n                    <Button\n                        type='primary'\n                        size='large'\n                        style={{ width: '100%' }}\n                        onClick={() => {\n                            this.onUpload();\n                        }}\n                    >\n                        글 등록\n                    </Button>\n                </PostStyledBlock>\n            </PostStyledWrapper>\n        );\n    }\n}\n\nexport default Post;\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport * as post_api from '../../lib/api/post';\n\n// middleware\nimport { createReduxThunk } from '../../lib/middleware';\n\n// types\nconst WRITE = 'post/WRITE';\nconst WRITE_SUCCESS = 'post/WRITE_SUCCESS';\nconst WRITE_FAILURE = 'post/WRITE_FAILURE';\n\nconst GET_RAND_USER = 'post/GET_RAND_USER';\nconst GET_RAND_USER_SUCCESS = 'post/GET_RAND_USER_SUCCESS';\nconst GET_RAND_USER_FAILURE = 'post/GET_RAND_USER_FAILURE';\n\nconst GET_RAND_POST = 'post/GET_RAND_POST';\nconst GET_RAND_POST_SUCCESS = 'post/GET_RAND_POST_SUCCESS';\nconst GET_RAND_POST_FAILURE = 'post/GET_RAND_POST_FAILURE';\n\nconst EDIT_POST = 'post/EDIT_POST';\nconst EDIT_USER = 'post/EDIT_USER';\n\n// actions\nexport const postWrite = createReduxThunk(WRITE, post_api.writePost);\nexport const getUser = createReduxThunk(GET_RAND_USER, post_api.getUser);\nexport const getPost = createReduxThunk(GET_RAND_POST, post_api.getPost);\nexport const editPost = createAction(EDIT_POST);\nexport const editUser = createAction(EDIT_USER);\n\n// initalState\nconst initialState = {\n    user_uid: '',\n    user_token: '',\n    contents: '',\n};\n\n// reducer\nconst authReducer = handleActions(\n    {\n        [EDIT_USER]: (state, { payload }) =>\n            produce(state, draft => {\n                draft.user_uid = payload.uid;\n            }),\n        [EDIT_POST]: (state, { payload }) =>\n            produce(state, draft => {\n                draft.contents = payload;\n            }),\n        [GET_RAND_USER_SUCCESS]: (state, { payload }) =>\n            produce(state, draft => {\n                const data = JSON.parse(payload);\n                console.log(data);\n                draft.user_uid = data.user_uid;\n                draft.user_token = data.user_token;\n            }),\n        [GET_RAND_USER_FAILURE]: (state, action) =>\n            produce(state, draft => {\n                console.log('error: ', state, action);\n            }),\n        [GET_RAND_POST_SUCCESS]: (state, { payload }) =>\n            produce(state, draft => {\n                draft.contents = payload;\n            }),\n        [GET_RAND_POST_FAILURE]: (state, action) =>\n            produce(state, draft => {\n                console.log('error: ', state, action);\n            }),\n        [WRITE_SUCCESS]: (state, { payload }) =>\n            produce(state, draft => {\n                draft.user_uid = '';\n                draft.user_token = '';\n                draft.contents = '';\n            }),\n        [WRITE_FAILURE]: (state, action) =>\n            produce(state, draft => {\n                console.log(state, action);\n            }),\n    },\n    initialState,\n);\nexport default authReducer;\n","import axios from '../axios';\n\nexport const getUser = () => {\n    return axios.post('/user/account/get_fuser_uid');\n};\n\nexport const getPost = () => {\n    return axios.post('/post/post/get_gdr_content');\n};\n\nexport const writePost = data => {\n    console.log('data: ', data);\n    return axios.post('/post/post/upload_post', data);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n// components\nimport Post from './post';\nimport { editPost, editUser, postWrite, getPost, getUser } from '../../reducer/modules/post';\n\nclass AuthContainer extends React.PureComponent {\n    render() {\n        return <Post {...this.props} />;\n    }\n}\n\nconst mapStateToProps = state => ({\n    user_uid: state.post.user_uid,\n    user_token: state.post.user_token,\n    contents: state.post.contents,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    edit: post => dispatch(editPost(post)),\n    editUser: user => dispatch(editUser(user)),\n    getPost: () => dispatch(getPost()),\n    getUser: () => dispatch(getUser()),\n    write: data => dispatch(postWrite(data)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AuthContainer);\n","import React from 'react';\nimport { Switch, Route, withRouter } from 'react-router-dom';\n\n// pages\nimport Auth from './pages/auth';\nimport Home from './pages/home';\nimport Post from './pages/post';\n\nclass App extends React.PureComponent {\n    componentDidMount = () => {\n        this.props.history.push('/post');\n        // const token = localStorage.getItem('authToken');\n        // if (!token || token == null) {\n        //     this.props.history.push('/auth');\n        // }\n    };\n\n    render() {\n        return (\n            <div id='app-container'>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route path='/auth' component={Auth} />\n                    <Route path='/post' component={Post} />\n                    <Route\n                        render={() => (\n                            <div>\n                                <p>Not found</p>\n                            </div>\n                        )}\n                    />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n// reducers\nimport auth from './modules/auth';\nimport post from './modules/post';\n\nconst reducers = combineReducers({ auth, post });\nconst store = createStore(reducers, applyMiddleware(thunk));\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './reducer';\nimport './styles/index.scss';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}